data <- read.csv('data-input/iris.data.csv')
View(data)
iris
data <- iris
View(data)
boxplot(data$Sepal.Width)
boxplot(data$Petal.Length)
boxplot(data$Petal.Width)
SepWid_out <- boxplot(data$Sepal.Width, plot = F)$out
SepWid
SepWid_out
head(data[order(data$Sepal.Width, decreasing = T),])
data <- data[-which(data$Sepal.Width %in% SepWid_out),]
head(data[order(data$Sepal.Width, decreasing = T),])
data %>%
select_if(is.numeric) %>%
ggcorr(label = T)
library(scales, warn.conflicts = F)
library(dplyr,warn.conflicts = F)
library(leaps, warn.conflicts = F)
library(MLmetrics, warn.conflicts = F)
library(ggplot2, warn.conflicts = F)
library(GGally, warn.conflicts = F)
library(zoo, warn.conflicts = F)
library(lmtest,warn.conflicts = F)
library(carData, warn.conflicts = F)
library(car, warn.conflicts = F)
library(formatR, warn.conflicts = F)
library(scales, warn.conflicts = F)
library(dplyr,warn.conflicts = F)
library(leaps, warn.conflicts = F)
library(MLmetrics, warn.conflicts = F)
library(ggplot2, warn.conflicts = F)
library(GGally, warn.conflicts = F)
library(zoo, warn.conflicts = F)
library(lmtest,warn.conflicts = F)
library(carData, warn.conflicts = F)
library(car, warn.conflicts = F)
library(formatR, warn.conflicts = F)
data %>%
select_if(is.numeric) %>%
ggcorr(label = T)
library(FactoMineR, warn.conflicts = F)
set.seed(417)
intrain <- sample(nrow(data), nrow(data)*0.8)
length(intrain)
data.train <- data[intrain, ]
data.test <- data[-intrain, ]
### Make the glm
data.glm <- glm(Species~.,data = data, family = "Binomial")
data.glm <- glm(Species~.,data = data, family = "binomial")
data.glm <- glm(Species~Sepal.Height,data = data, family = "binomial")
data.glm <- glm(Species~Sepal.Length,data = data, family = "binomial")
data.glm <- glm(Species~Sepal.Length,data = data, family = "binomial")
data.g
data.glm
data.glm <- glm(Species~Sepal.Length+Sepal.Width,data = data, family = "binomial")
data.glm <- glm(Species~Sepal.Length+Petal.Length,data = data, family = "binomial")
data.glm <- glm(Species~Sepal.Length+Petal.Width',data = data, family = "binomial")
data.glm <- glm(Species~Sepal.Length+Petal.Width,data = data, family = "binomial")
data.glm
data.glm
data.glm <- glm(Species~Sepal.Length+Petal.Width,data = data, family = "binomial")
data.glm
data.glm <- glm(Species~Sepal.Length+Petal.Width,data = data, family = "binomial")
data.glm
table(data$Species, data$Sepal.Width)
library(knitr)
library(rmdformats)
## Global options
options(max.print="1000000")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
options(scipen = 9999)
data.glm <- glm(Species~Sepal.Length+Petal.Width,data = data, family = "binomial")
data.glm
table(data$Species, data$Sepal.Width)
data.glm <- glm(Species~Sepal.Length,data = data, family = "binomial")
data.glm
table(data$Species, data$Sepal.Width)
data.glm <- glm(Species~.,data = data, family = "binomial")
data.glm <- glm(Species~Sepal.Width,data = data, family = "binomial")
data.glm
data.glm <- glm(Species~Sepal.Height,data = data, family = "binomial")
data.glm <- glm(Species~Sepal.Length+Sepal.Widtg,data = data, family = "binomial")
data.glm <- glm(Species~Sepal.Length+Sepal.Width,data = data, family = "binomial")
data.glm
data.glm <- glm(Species~Sepal.Length+Sepal.Width,data = data, family = "binomial")
data.glm
table(data$Species, data$Sepal.Width)
data.glm <- glm(Species~Sepal.Length+Sepal.Width+Petal.Width,data = data, family = "binomial")
data.glm
table(data$Species, data$Sepal.Width)
data.glm <- glm(Species~Sepal.Length+Sepal.Width+Petal.Width+Petal.Length,data = data, family = "binomial")
data.glm
data.glm <- glm(Species~Sepal.Length+Sepal.Width+Petal.Width+Petal.Length,data = data.train, family = "binomial")
data.glm
data.glm <- glm(Species~Sepal.Width,data = data.train, family = "binomial")
data.glm
data.test$pred <- predict(data.glm,data.test,type="Response")
data.test$pred <- predict(data.glm,data.test,type="response")
data.test$pred
```{r}
data.test$pred <- predict(data.glm,data.test,type="response")
table("predicted"=as.numeric(data.test$pred>=0.5), "actual"=data.test$Species)
caret::confusionMatrix(data = data=as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"),positive="1")
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"),positive="1")
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"),positive="1")
```{r}
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"),positive="1")
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"),positive="1")
table("predicted"=as.numeric(data.test$pred>=0.5), "actual"=data.test$Species)
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"),positive="1")
caret::confusionMatrix(data = as.factor(data.test$pred>=0.5), reference = data.test$Species,dnn=c("Pred","Act"),positive="1")
caret::confusionMatrix(data = as.factor(data.test$pred>=0.5), reference = data.test$Species,dnn=c("Pred","Act"),positive="1")
caret::confusionMatrix(data = as.factor(data.test$pred>=0.5), reference = data.test$Species,dnn=c("Pred","Act"),positive="1")
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
View(data.train)
View(data.test)
View(data.train)
View(data.test)
View(data.train)
View(data.test)
View(data.train)
View(data.test)
View(data.train)
data.test$pred <- predict(data.glm,data.test,type="response")
table("predicted"=as.numeric(data.test$pred>=0.5), "actual"=data.test$Species)
table("predicted"=as.numeric(pred.test>=0.5), "actual"=data.test$Species)
pred.test <- predict(data.glm,data.test,type="response")
table("predicted"=as.numeric(pred.test>=0.5), "actual"=data.test$Species)
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
library(knitr)
library(rmdformats)
## Global options
options(max.print="1000000")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
options(scipen = 9999)
library(FactoMineR, warn.conflicts = F)
library(scales, warn.conflicts = F)
library(dplyr,warn.conflicts = F)
library(leaps, warn.conflicts = F)
library(MLmetrics, warn.conflicts = F)
library(ggplot2, warn.conflicts = F)
library(GGally, warn.conflicts = F)
library(zoo, warn.conflicts = F)
library(lmtest,warn.conflicts = F)
library(carData, warn.conflicts = F)
library(car, warn.conflicts = F)
library(formatR, warn.conflicts = F)
data <- iris
head(data)
str(data)
summary(data)
boxplot(data$Sepal.Length)
boxplot(data$Sepal.Width)
SepWid_out <- boxplot(data$Sepal.Width, plot = F)$out
SepWid_out
data <- data[-which(data$Sepal.Width %in% SepWid_out),]
head(data[order(data$Sepal.Width, decreasing = T),])
boxplot(data$Petal.Length)
boxplot(data$Petal.Width)
set.seed(417)
intrain <- sample(nrow(data), nrow(data)*0.8)
length(intrain)
data.train <- data[intrain, ]
data.test <- data[-intrain, ]
head(data.train)
str(data.train)
summary(data.train)
head(data.test)
str(data.test)
summary(data.test)
data.glm <- glm(Species~Sepal.Length+Sepal.Width+Petal.Width+Petal.Length,data = data.train, family = "binomial")
data.glm
data.glm <- glm(Species~Sepal.Width,data = data.train, family = "binomial")
data.glm
pred.test <- predict(data.glm,data.test,type="response")
table("predicted"=as.numeric(pred.test>=0.5), "actual"=data.test$Species)
caret::confusionMatrix(data = as.factor(as.numeric(pred.test>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
data.test$pred <- predict(data.glm,data.test,type="response")
table("predicted"=as.numeric(data.test$pred>=0.5), "actual"=data.test$Species)
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
as.factor(as.numeric(data.test$pred>=0.5))
length(as.factor(as.numeric(data.test$pred>=0.5)))
length(data.test$Species)
table("predicted"=as.numeric(data.test$pred>=0.5), "actual"=data.test$Species)
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species,dnn=c("Pred","Act"))
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species)
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species)
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species)
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species)
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species)
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species)
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species)
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species)
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species)
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species)
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species)
caret::confusionMatrix(data = data.test$Species, reference = as.factor(as.numeric(data.test$pred>=0.5)))
caret::confusionMatrix(data = data.test$Species, reference = as.factor(as.numeric(data.test$pred>=0.5)))
caret::confusionMatrix(data = data.test$Species, reference = as.factor(as.numeric(data.test$pred>=0.5)))
caret::confusionMatrix(data = data.test$Species, reference = as.factor(as.numeric(data.test$pred>=0.5)))
caret::confusionMatrix(data = data.test$Species, reference = as.factor(as.numeric(data.test$pred>=0.5)))
caret::confusionMatrix(data = data.test$Species, reference = as.factor(as.numeric(data.test$pred>=0.5)))
caret::confusionMatrix(data = data.test$Species, reference = as.factor(as.numeric(data.test$pred>=0.5)))
caret::confusionMatrix(data = data.test$Species, reference = as.factor(as.numeric(data.test$pred>=0.5)))
caret::confusionMatrix(data = data.test$Species, reference = as.factor(as.numeric(data.test$pred>=0.5)))
caret::confusionMatrix(data = data.test$Species, reference = as.factor(as.numeric(data.test$pred>=0.5)))
caret::confusionMatrix(data = data.test$Species, reference = as.factor(as.numeric(data.test$pred>=0.5)))
caret::confusionMatrix(data = as.factor(as.numeric(data.test$pred>=0.5)), reference = data.test$Species)
data.test$pred <- predict(data.glm,data.test,type="response")
responsePred <- as.factor(as.numeric(data.test$pred>=0.5))
caret::confusionMatrix(data = responsePred, reference = data.test$Species)
caret::confusionMatrix(data = responsePred, reference = data.test$Species)
caret::confusionMatrix(data = responsePred, reference = data.test$Species)
caret::confusionMatrix(data = responsePred, reference = data.test$Species)
caret::confusionMatrix(data = responsePred, reference = data.test$Species)
caret::confusionMatrix(data = responsePred, reference = data.test$Species)
caret::confusionMatrix(data = responsePred, reference = data.test$Species)
caret::confusionMatrix(data = responsePred, reference = data.test$Species)
caret::confusionMatrix(data = responsePred, reference = data.test$Species)
caret::confusionMatrix(data = responsePred, reference = data.test$Species)
```{r}
caret::confusionMatrix(data = responsePred, reference = data.test$Species)
